You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
----------------------------
class Solution {
public:
    int maxArea(vector<int>& height) {
        int left = 0;  // Start pointer at the beginning of the array
        int right = height.size() - 1;  // End pointer at the end of the array
        int maxArea = 0;  // Initialize max area to 0
        
        while (left < right) {  // Continue until the two pointers meet
            // Calculate the area formed by the lines at 'left' and 'right'
            int currentArea = min(height[left], height[right]) * (right - left);
            maxArea = max(maxArea, currentArea);  // Update maxArea if currentArea is larger
            
            // Move the pointer that points to the shorter line inward
            if (height[left] < height[right]) {
                left++;  // Move 'left' pointer inward
            } else {
                right--;  // Move 'right' pointer inward
            }
        }
        
        return maxArea;  // Return the maximum area found
    }
};
--------------------------
