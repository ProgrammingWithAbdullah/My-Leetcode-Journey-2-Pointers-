A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters,
it reads the same forward and backward. Alphanumeric characters include letters and numbers.
Given a string s, return true if it is a palindrome, or false otherwise.

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.

Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.

Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.

---------------------
#include <cctype>  
#include <algorithm>
#include <string>
#include <iostream>

class Solution {
public:
    bool isPalindrome(std::string s) {
        if (s.size() == 1 || s.size() == 0) {
            return true;
        }

        for (int i = 0; i < s.size(); i++) {
        if ((s[i] < 'A' || s[i] > 'Z') && (s[i] < 'a' || s[i] > 'z')
        && (s[i] < '0' || s[i] > '9')) 
 {
                s.erase(i, 1);  // Remove the character
                i--;  // Adjust index after erasing
            }
        }

        std::transform(s.begin(), s.end(), s.begin(), ::tolower); 

        std::cout << s;

        int p1 = 0;
        int p2 = s.size() - 1;

        while (p1 < s.size() / 2) {
            if (s[p1] == s[p2]) {
                p1++;
                p2--;
            } else {
                return false;
            }
        }
        return true;
    }
};
